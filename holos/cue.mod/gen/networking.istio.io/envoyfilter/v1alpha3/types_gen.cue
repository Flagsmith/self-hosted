// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f deploy/clusters/aws2/components/istio-base/istio-base.gen.yaml

package v1alpha3

import "strings"

#EnvoyFilter: {
	// Customizing Envoy configuration generated by Istio. See more
	// details at:
	// https://istio.io/docs/reference/config/networking/envoy-filter.html
	spec!:      #EnvoyFilterSpec
	apiVersion: "networking.istio.io/v1alpha3"
	kind:       "EnvoyFilter"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}
}

// Customizing Envoy configuration generated by Istio. See more
// details at:
// https://istio.io/docs/reference/config/networking/envoy-filter.html
#EnvoyFilterSpec: {
	// One or more patches with match conditions.
	configPatches?: [...{
		// Specifies where in the Envoy configuration, the patch should be
		// applied.
		//
		// Valid Options: LISTENER, FILTER_CHAIN, NETWORK_FILTER,
		// HTTP_FILTER, ROUTE_CONFIGURATION, VIRTUAL_HOST, HTTP_ROUTE,
		// CLUSTER, EXTENSION_CONFIG, BOOTSTRAP, LISTENER_FILTER
		applyTo?: "INVALID" | "LISTENER" | "FILTER_CHAIN" | "NETWORK_FILTER" | "HTTP_FILTER" | "ROUTE_CONFIGURATION" | "VIRTUAL_HOST" | "HTTP_ROUTE" | "CLUSTER" | "EXTENSION_CONFIG" | "BOOTSTRAP" | "LISTENER_FILTER"

		// Match on listener/route configuration/cluster.
		match?: ({} | {
			listener: _
		} | {
			routeConfiguration: _
		} | {
			cluster: _
		}) & {
			// Match on envoy cluster attributes.
			cluster?: {
				// The exact name of the cluster to match.
				name?: string

				// The service port for which this cluster was generated.
				portNumber?: uint32

				// The fully qualified service name for this cluster.
				service?: string

				// The subset associated with the service.
				subset?: string
			}

			// The specific config generation context to match on.
			//
			// Valid Options: ANY, SIDECAR_INBOUND, SIDECAR_OUTBOUND, GATEWAY
			context?: "ANY" | "SIDECAR_INBOUND" | "SIDECAR_OUTBOUND" | "GATEWAY"

			// Match on envoy listener attributes.
			listener?: {
				// Match a specific filter chain in a listener.
				filterChain?: {
					// Applies only to sidecars.
					applicationProtocols?: string

					// The destination_port value used by a filter chain's match
					// condition.
					destinationPort?: uint32

					// The name of a specific filter to apply the patch to.
					filter?: {
						// The filter name to match on.
						name?: string
						subFilter?: {
							// The filter name to match on.
							name?: string
						}
					}

					// The name assigned to the filter chain.
					name?: string

					// The SNI value used by a filter chain's match condition.
					sni?: string

					// Applies only to `SIDECAR_INBOUND` context.
					transportProtocol?: string
				}

				// Match a specific listener filter.
				listenerFilter?: string

				// Match a specific listener by its name.
				name?:     string
				portName?: string

				// The service port/gateway port to which traffic is being
				// sent/received.
				portNumber?: uint32
			}

			// Match on properties associated with a proxy.
			proxy?: {
				// Match on the node metadata supplied by a proxy when connecting
				// to Istio Pilot.
				metadata?: {
					[string]: string
				}

				// A regular expression in golang regex format (RE2) that can be
				// used to select proxies using a specific version of istio
				// proxy.
				proxyVersion?: string
			}

			// Match on envoy HTTP route configuration attributes.
			routeConfiguration?: {
				// The Istio gateway config's namespace/name for which this route
				// configuration was generated.
				gateway?: string

				// Route configuration name to match on.
				name?: string

				// Applicable only for GATEWAY context.
				portName?: string

				// The service port number or gateway server port number for which
				// this route configuration was generated.
				portNumber?: uint32

				// Match a specific virtual host in a route configuration and
				// apply the patch to the virtual host.
				vhost?: {
					// The VirtualHosts objects generated by Istio are named as
					// host:port, where the host typically corresponds to the
					// VirtualService's host field or the hostname of a service in
					// the registry.
					name?: string

					// Match a specific route within the virtual host.
					route?: {
						// Match a route with specific action type.
						//
						// Valid Options: ANY, ROUTE, REDIRECT, DIRECT_RESPONSE
						action?: "ANY" | "ROUTE" | "REDIRECT" | "DIRECT_RESPONSE"

						// The Route objects generated by default are named as default.
						name?: string
					}
				}
			}
		}

		// The patch to apply along with the operation.
		patch?: {
			// Determines the filter insertion order.
			//
			// Valid Options: AUTHN, AUTHZ, STATS
			filterClass?: "UNSPECIFIED" | "AUTHN" | "AUTHZ" | "STATS"

			// Determines how the patch should be applied.
			//
			// Valid Options: MERGE, ADD, REMOVE, INSERT_BEFORE, INSERT_AFTER,
			// INSERT_FIRST, REPLACE
			operation?: "INVALID" | "MERGE" | "ADD" | "REMOVE" | "INSERT_BEFORE" | "INSERT_AFTER" | "INSERT_FIRST" | "REPLACE"

			// The JSON config of the object being patched.
			value?: {}
		}
	}]

	// Priority defines the order in which patch sets are applied
	// within a context.
	priority?: int

	// Optional.
	targetRefs?: [...{
		// group is the group of the target resource.
		group?: string

		// kind is kind of the target resource.
		kind?: string

		// name is the name of the target resource.
		name?: string

		// namespace is the namespace of the referent.
		namespace?: string
	}]
	workloadSelector?: {
		// One or more labels that indicate a specific set of pods/VMs on
		// which the configuration should be applied.
		labels?: {
			[string]: string
		}
	}
}
