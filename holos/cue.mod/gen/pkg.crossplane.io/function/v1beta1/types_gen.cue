// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f https://raw.githubusercontent.com/crossplane/crossplane/v1.16.0/cluster/crds/pkg.crossplane.io_functions.yaml

package v1beta1

import "strings"

// A Function installs an OCI compatible Crossplane package,
// extending
// Crossplane with support for a new kind of composition function.
//
//
// Read the Crossplane documentation for
// [more information about
// Functions](https://docs.crossplane.io/latest/concepts/composition-functions).
#Function: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "pkg.crossplane.io/v1beta1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "Function"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// FunctionSpec specifies the configuration of a Function.
	spec!: #FunctionSpec
}

// FunctionSpec specifies the configuration of a Function.
#FunctionSpec: {
	// Map of string keys and values that can be used to organize and
	// categorize
	// (scope and select) objects. May match selectors of replication
	// controllers
	// and services.
	// More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	commonLabels?: {
		[string]: string
	}
	controllerConfigRef?: {
		// Name of the ControllerConfig.
		name: string
	}

	// IgnoreCrossplaneConstraints indicates to the package manager
	// whether to
	// honor Crossplane version constrains specified by the package.
	// Default is false.
	ignoreCrossplaneConstraints?: bool | *false

	// Package is the name of the package that is being requested.
	package: string

	// PackagePullPolicy defines the pull policy for the package.
	// Default is IfNotPresent.
	packagePullPolicy?: string | *"IfNotPresent"

	// PackagePullSecrets are named secrets in the same namespace that
	// can be used
	// to fetch packages from private registries.
	packagePullSecrets?: [...{
		// Name of the referent.
		// More info:
		// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
		// TODO: Add other useful fields. apiVersion, kind, uid?
		name?: string
	}]

	// RevisionActivationPolicy specifies how the package controller
	// should
	// update from one revision to the next. Options are Automatic or
	// Manual.
	// Default is Automatic.
	revisionActivationPolicy?: string | *"Automatic"

	// RevisionHistoryLimit dictates how the package controller cleans
	// up old
	// inactive package revisions.
	// Defaults to 1. Can be disabled by explicitly setting to 0.
	revisionHistoryLimit?: int | *1

	// RuntimeConfigRef references a RuntimeConfig resource that will
	// be used
	// to configure the package runtime.
	runtimeConfigRef?: {
		// API version of the referent.
		apiVersion?: string | *"pkg.crossplane.io/v1beta1"

		// Kind of the referent.
		kind?: string | *"DeploymentRuntimeConfig"

		// Name of the RuntimeConfig.
		name: string
	} | *{
		name: "default"
	}

	// SkipDependencyResolution indicates to the package manager
	// whether to skip
	// resolving dependencies for a package. Setting this value to
	// true may have
	// unintended consequences.
	// Default is false.
	skipDependencyResolution?: bool | *false
}
