// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/holos-run/holos/api/core/v1alpha2

package v1alpha2

import "google.golang.org/protobuf/types/known/structpb"

#PlatformMetadata: {
	// Name represents the Platform name.
	name: string @go(Name)
}

// Platform represents a platform to manage.  A Platform resource informs holos
// which components to build.  The platform resource also acts as a container
// for the platform model form values provided by the PlatformService.  The
// primary use case is to collect the cluster names, cluster types, platform
// model, and holos components to build into one resource.
#Platform: {
	// Kind is a string value representing the resource this object represents.
	kind: string & "Platform" @go(Kind)

	// APIVersion represents the versioned schema of this representation of an object.
	apiVersion: string & (string | *"v1alpha2") @go(APIVersion)

	// Metadata represents data about the object such as the Name.
	metadata: #PlatformMetadata @go(Metadata)

	// Spec represents the specification.
	spec: #PlatformSpec @go(Spec)
}

// PlatformSpec represents the specification of a Platform.  Think of a platform
// specification as a list of platform components to apply to a list of
// kubernetes clusters combined with the user-specified Platform Model.
#PlatformSpec: {
	// Model represents the platform model holos gets from from the
	// PlatformService.GetPlatform rpc method and provides to CUE using a tag.
	model: structpb.#Struct @go(Model)

	// Components represents a list of holos components to manage.
	components: [...#PlatformSpecComponent] @go(Components,[]PlatformSpecComponent)
}

// PlatformSpecComponent represents a holos component to build or render.
#PlatformSpecComponent: {
	// Path is the path of the component relative to the platform root.
	path: string @go(Path)

	// Cluster is the cluster name to provide when rendering the component.
	cluster: string @go(Cluster)
}
