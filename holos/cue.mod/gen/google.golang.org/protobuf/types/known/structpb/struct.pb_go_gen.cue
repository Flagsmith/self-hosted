// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go google.golang.org/protobuf/types/known/structpb

// Package structpb contains generated types for google/protobuf/struct.proto.
//
// The messages (i.e., Value, Struct, and ListValue) defined in struct.proto are
// used to represent arbitrary JSON. The Value message represents a JSON value,
// the Struct message represents a JSON object, and the ListValue message
// represents a JSON array. See https://json.org for more information.
//
// The Value, Struct, and ListValue types have generated MarshalJSON and
// UnmarshalJSON methods such that they serialize JSON equivalent to what the
// messages themselves represent. Use of these types with the
// "google.golang.org/protobuf/encoding/protojson" package
// ensures that they will be serialized as their JSON equivalent.
//
// # Conversion to and from a Go interface
//
// The standard Go "encoding/json" package has functionality to serialize
// arbitrary types to a large degree. The Value.AsInterface, Struct.AsMap, and
// ListValue.AsSlice methods can convert the protobuf message representation into
// a form represented by any, map[string]any, and []any.
// This form can be used with other packages that operate on such data structures
// and also directly with the standard json package.
//
// In order to convert the any, map[string]any, and []any
// forms back as Value, Struct, and ListValue messages, use the NewStruct,
// NewList, and NewValue constructor functions.
//
// # Example usage
//
// Consider the following example JSON object:
//
//	{
//		"firstName": "John",
//		"lastName": "Smith",
//		"isAlive": true,
//		"age": 27,
//		"address": {
//			"streetAddress": "21 2nd Street",
//			"city": "New York",
//			"state": "NY",
//			"postalCode": "10021-3100"
//		},
//		"phoneNumbers": [
//			{
//				"type": "home",
//				"number": "212 555-1234"
//			},
//			{
//				"type": "office",
//				"number": "646 555-4567"
//			}
//		],
//		"children": [],
//		"spouse": null
//	}
//
// To construct a Value message representing the above JSON object:
//
//	m, err := structpb.NewValue(map[string]any{
//		"firstName": "John",
//		"lastName":  "Smith",
//		"isAlive":   true,
//		"age":       27,
//		"address": map[string]any{
//			"streetAddress": "21 2nd Street",
//			"city":          "New York",
//			"state":         "NY",
//			"postalCode":    "10021-3100",
//		},
//		"phoneNumbers": []any{
//			map[string]any{
//				"type":   "home",
//				"number": "212 555-1234",
//			},
//			map[string]any{
//				"type":   "office",
//				"number": "646 555-4567",
//			},
//		},
//		"children": []any{},
//		"spouse":   nil,
//	})
//	if err != nil {
//		... // handle error
//	}
//	... // make use of m as a *structpb.Value
package structpb

// `NullValue` is a singleton enumeration to represent the null value for the
// `Value` type union.
//
// The JSON representation for `NullValue` is JSON `null`.
#NullValue: int32 // #enumNullValue

#enumNullValue:
	#NullValue_NULL_VALUE

#values_NullValue: NullValue_NULL_VALUE: #NullValue_NULL_VALUE

// Null value.
#NullValue_NULL_VALUE: #NullValue & 0

// `Struct` represents a structured data value, consisting of fields
// which map to dynamically typed values. In some languages, `Struct`
// might be supported by a native representation. For example, in
// scripting languages like JS a struct is represented as an
// object. The details of that representation are described together
// with the proto support for the language.
//
// The JSON representation for `Struct` is JSON object.
#Struct: _

// `Value` represents a dynamically typed value which can be either
// null, a number, a string, a boolean, a recursive struct value, or a
// list of values. A producer of value is expected to set one of these
// variants. Absence of any variant indicates an error.
//
// The JSON representation for `Value` is JSON value.
#Value: _

_#isValue_Kind: _

#Value_NullValue: {
	// Represents a null value.
	NullValue: #NullValue @protobuf(1,varint,opt,name=null_value,json=nullValue,proto3,enum=google.protobuf.NullValue,oneof)
}

#Value_NumberValue: {
	// Represents a double value.
	NumberValue: float64 @protobuf(2,fixed64,opt,name=number_value,json=numberValue,proto3,oneof)
}

#Value_StringValue: {
	// Represents a string value.
	StringValue: string @protobuf(3,bytes,opt,name=string_value,json=stringValue,proto3,oneof)
}

#Value_BoolValue: {
	// Represents a boolean value.
	BoolValue: bool @protobuf(4,varint,opt,name=bool_value,json=boolValue,proto3,oneof)
}

#Value_StructValue: {
	// Represents a structured value.
	StructValue?: null | #Struct @go(,*Struct) @protobuf(5,bytes,opt,name=struct_value,json=structValue,proto3,oneof)
}

#Value_ListValue: {
	// Represents a repeated `Value`.
	ListValue?: null | #ListValue @go(,*ListValue) @protobuf(6,bytes,opt,name=list_value,json=listValue,proto3,oneof)
}

// `ListValue` is a wrapper around a repeated field of values.
//
// The JSON representation for `ListValue` is JSON array.
#ListValue: _
