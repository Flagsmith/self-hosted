// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f /Users/jeff/Holos/kargo-demo/deploy/components/kargo/kargo.gen.yaml

package v1alpha1

import "strings"

// Freight represents a collection of versioned artifacts.
#Freight: {
	// Alias is a human-friendly alias for a piece of Freight. This is
	// an optional
	// field. A defaulting webhook will sync this field with the value
	// of the
	// kargo.akuity.io/alias label. When the alias label is not
	// present or differs
	// from the value of this field, the defaulting webhook will set
	// the label to
	// the value of this field. If the alias label is present and this
	// field is
	// empty, the defaulting webhook will set the value of this field
	// to the value
	// of the alias label. If this field is empty and the alias label
	// is not
	// present, the defaulting webhook will choose an available alias
	// and assign
	// it to both the field and label.
	alias?: string

	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "kargo.akuity.io/v1alpha1"

	// Charts describes specific versions of specific Helm charts.
	charts?: [...{
		// Name specifies the name of the chart.
		name?: string

		// RepoURL specifies the URL of a Helm chart repository. Classic
		// chart
		// repositories (using HTTP/S) can contain differently named
		// charts. When this
		// field points to such a repository, the Name field will specify
		// the name of
		// the chart within the repository. In the case of a repository
		// within an OCI
		// registry, the URL implicitly points to a specific chart and the
		// Name field
		// will be empty.
		repoURL?: string

		// Version specifies a particular version of the chart.
		version?: string
	}]

	// Commits describes specific Git repository commits.
	commits?: [...{
		// Author is the author of the commit.
		author?: string

		// Branch denotes the branch of the repository where this commit
		// was found.
		branch?: string

		// Committer is the person who committed the commit.
		committer?: string

		// ID is the ID of a specific commit in the Git repository
		// specified by
		// RepoURL.
		id?: string

		// Message is the message associated with the commit. At present,
		// this only
		// contains the first line (subject) of the commit message.
		message?: string

		// RepoURL is the URL of a Git repository.
		repoURL?: string

		// Tag denotes a tag in the repository that matched selection
		// criteria and
		// resolved to this commit.
		tag?: string
	}]

	// Images describes specific versions of specific container
	// images.
	images?: [...{
		// Digest identifies a specific version of the image in the
		// repository
		// specified by RepoURL. This is a more precise identifier than
		// Tag.
		digest?: string

		// GitRepoURL specifies the URL of a Git repository that contains
		// the source
		// code for the image repository referenced by the RepoURL field
		// if Kargo was
		// able to infer it.
		gitRepoURL?: string

		// RepoURL describes the repository in which the image can be
		// found.
		repoURL?: string

		// Tag identifies a specific version of the image in the
		// repository specified
		// by RepoURL.
		tag?: string
	}]

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "Freight"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// Origin describes a kind of Freight in terms of its origin.
	origin: {
		// Kind is the kind of resource from which Freight may have
		// originated. At
		// present, this can only be "Warehouse".
		kind: "Warehouse"

		// Name is the name of the resource of the kind indicated by the
		// Kind field
		// from which Freight may originated.
		name: string
	}
}
