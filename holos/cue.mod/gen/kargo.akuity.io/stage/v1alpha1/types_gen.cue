// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f /Users/jeff/Holos/kargo-demo/deploy/components/kargo/kargo.gen.yaml

package v1alpha1

import "strings"

// Stage is the Kargo API's main type.
#Stage: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "kargo.akuity.io/v1alpha1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "Stage"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// Spec describes sources of Freight used by the Stage and how to
	// incorporate
	// Freight into the Stage.
	spec!: #StageSpec
}

// Spec describes sources of Freight used by the Stage and how to
// incorporate
// Freight into the Stage.
#StageSpec: {
	promotionTemplate?: {
		// PromotionTemplateSpec describes the (partial) specification of
		// a Promotion
		// for a Stage. This is a template that can be used to create a
		// Promotion for a
		// Stage.
		spec: {
			// Steps specifies the directives to be executed as part of a
			// Promotion.
			// The order in which the directives are executed is the order in
			// which they
			// are listed in this field.
			steps?: [...{
				// As is the alias this step can be referred to as.
				as?: string

				// Config is opaque configuration for the PromotionStep that is
				// understood
				// only by each PromotionStep's implementation. It is legal to
				// utilize
				// expressions in defining values at any level of this block.
				// See https://docs.kargo.io/references/expression-language for
				// details.
				config?: _

				// Retry is the retry policy for this step.
				retry?: {
					// ErrorThreshold is the number of consecutive times the step must
					// fail (for
					// any reason) before retries are abandoned and the entire
					// Promotion is marked
					// as failed.
					//
					// If this field is set to 0, the effective default will be a
					// step-specific
					// one. If no step-specific default exists (i.e. is also 0), the
					// effective
					// default will be the system-wide default of 1.
					//
					// A value of 1 will cause the Promotion to be marked as failed
					// after just
					// a single failure; i.e. no retries will be attempted.
					//
					// There is no option to specify an infinite number of retries
					// using a value
					// such as -1.
					//
					// In a future release, Kargo is likely to become capable of
					// distinguishing
					// between recoverable and non-recoverable step failures. At that
					// time, it is
					// planned that unrecoverable failures will not be subject to this
					// threshold
					// and will immediately cause the Promotion to be marked as failed
					// without
					// further condition.
					errorThreshold?: int

					// Timeout is the soft maximum interval in which a step that
					// returns a Running
					// status (which typically indicates it's waiting for something to
					// happen)
					// may be retried.
					//
					// The maximum is a soft one because the check for whether the
					// interval has
					// elapsed occurs AFTER the step has run. This effectively means a
					// step may
					// run ONCE beyond the close of the interval.
					//
					// If this field is set to nil, the effective default will be a
					// step-specific
					// one. If no step-specific default exists (i.e. is also nil), the
					// effective
					// default will be the system-wide default of 0.
					//
					// A value of 0 will cause the step to be retried indefinitely
					// unless the
					// ErrorThreshold is reached.
					timeout?: string
				}

				// Uses identifies a runner that can execute this step.
				uses: strings.MinRunes(1)
			}] & [_, ...]

			// Vars is a list of variables that can be referenced by
			// expressions in
			// promotion steps.
			vars?: [...{
				// Name is the name of the variable.
				name: strings.MinRunes(1) & {
					=~"^[a-zA-Z_]\\w*$"
				}

				// Value is the value of the variable. It is allowed to utilize
				// expressions
				// in the value.
				// See https://docs.kargo.io/references/expression-language for
				// details.
				value: string
			}]
		}
	}

	// RequestedFreight expresses the Stage's need for certain pieces
	// of Freight,
	// each having originated from a particular Warehouse. This list
	// must be
	// non-empty. In the common case, a Stage will request Freight
	// having
	// originated from just one specific Warehouse. In advanced cases,
	// requesting
	// Freight from multiple Warehouses provides a method of advancing
	// new
	// artifacts of different types through parallel pipelines at
	// different
	// speeds. This can be useful, for instance, if a Stage is home to
	// multiple
	// microservices that are independently versioned.
	requestedFreight: [...{
		// Origin specifies from where the requested Freight must have
		// originated.
		// This is a required field.
		origin: {
			// Kind is the kind of resource from which Freight may have
			// originated. At
			// present, this can only be "Warehouse".
			kind: "Warehouse"

			// Name is the name of the resource of the kind indicated by the
			// Kind field
			// from which Freight may originated.
			name: string
		}

		// Sources describes where the requested Freight may be obtained
		// from. This is
		// a required field.
		sources: {
			// Direct indicates the requested Freight may be obtained directly
			// from the
			// Warehouse from which it originated. If this field's value is
			// false, then
			// the value of the Stages field must be non-empty. i.e. Between
			// the two
			// fields, at least one source must be specified.
			direct?: bool

			// Stages identifies other "upstream" Stages as potential sources
			// of the
			// requested Freight. If this field's value is empty, then the
			// value of the
			// Direct field must be true. i.e. Between the two fields, at
			// least on source
			// must be specified.
			stages?: [...string]
		}
	}] & [_, ...]

	// Shard is the name of the shard that this Stage belongs to. This
	// is an
	// optional field. If not specified, the Stage will belong to the
	// default
	// shard. A defaulting webhook will sync the value of the
	// kargo.akuity.io/shard label with the value of this field. When
	// this field
	// is empty, the webhook will ensure that label is absent.
	shard?: string

	// Verification describes how to verify a Stage's current Freight
	// is fit for
	// promotion downstream.
	verification?: {
		// AnalysisRunMetadata contains optional metadata that should be
		// applied to
		// all AnalysisRuns.
		analysisRunMetadata?: {
			// Additional annotations to apply to an AnalysisRun.
			annotations?: {
				[string]: string
			}

			// Additional labels to apply to an AnalysisRun.
			labels?: {
				[string]: string
			}
		}

		// AnalysisTemplates is a list of AnalysisTemplates from which
		// AnalysisRuns
		// should be created to verify a Stage's current Freight is fit to
		// be promoted
		// downstream.
		analysisTemplates?: [...{
			// Name is the name of the AnalysisTemplate in the same
			// project/namespace as
			// the Stage.
			name: string
		}]

		// Args lists arguments that should be added to all AnalysisRuns.
		args?: [...{
			// Name is the name of the argument.
			name: string

			// Value is the value of the argument.
			value: string
		}]
	}
}
